apply plugin: 'com.android.application'
apply plugin: 'io.fabric'

apply from: '../gradle-extras/checkstyle.gradle'

/*******************************************************************************
 * Copyright (c) 2017 Rizky Kharisma (@ngengs)
 *
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 ******************************************************************************/

// Signing definition
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = null
if (keystorePropertiesFile.exists()) {
    keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

//Manifest version information!
int versionMajor = 1
int versionMinor = 0
int versionPatch = 1
int versionBuild = 1 // always bump build number.

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.1"
    defaultConfig {
        applicationId "com.ngengs.android.baking.apps"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode((versionMajor * 10000000) + (versionMinor * 100000) + (versionPatch * 100) + versionBuild)
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            if (keystoreProperties != null) {
                storeFile file(keystoreProperties['STORE_LOCATION_RELEASE'])
                storePassword keystoreProperties['STORE_PASSWORD_RELEASE']
                keyAlias keystoreProperties['KEY_ALIAS_RELEASE']
                keyPassword keystoreProperties['KEY_PASSWORD_RELEASE']
            }
        }

        debug {
            if (keystoreProperties != null) {
                storeFile file(keystoreProperties['STORE_LOCATION_DEBUG'])
                storePassword keystoreProperties['STORE_PASSWORD_DEBUG']
                keyAlias keystoreProperties['KEY_ALIAS_DEBUG']
                keyPassword keystoreProperties['KEY_PASSWORD_DEBUG']
            }
        }

    }

    buildTypes {
        release {
            minifyEnabled true
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            }
            proguardFiles getDefaultProguardFile('proguard-android.txt')
            proguardFiles fileTree(include: ['*.pro'], dir: 'proguards').asList().toArray()
            applicationVariants.all { variant ->
                variant.outputs.each { output ->
                    def newName = output.outputFile.name
                    newName = newName.replace("app-", applicationId + "-")
                    newName = newName.replace("-release", "-v" + versionName + "-build." + getBuildDate() + "-release")
                    output.outputFile = new File(output.outputFile.parent, newName)
                }
            }
        }
        debug {
            minifyEnabled false
            debuggable true
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.debug
            }
        }
    }
}

static def getBuildDate() {
    def date = new Date().format('yyyyMMdd')
    return date
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true;
    }
    compile 'com.android.support:appcompat-v7:26.0.0'
    compile 'com.android.support:design:26.0.0'
    compile 'com.android.support:cardview-v7:26.0.0'
    compile 'com.android.support:support-v13:26.0.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:support-v4:26.0.0'
    compile 'com.android.support:recyclerview-v7:26.0.0'
    compile 'com.android.support.test.espresso:espresso-idling-resource:3.0.1'
    compile 'com.github.bumptech.glide:glide:4.0.0'
    compile 'com.github.bumptech.glide:okhttp3-integration:4.0.0@aar'
    compile 'com.google.code.gson:gson:2.8.1'
    compile 'com.google.android.exoplayer:exoplayer-core:r2.5.1'
    compile 'com.google.android.exoplayer:exoplayer-dash:r2.5.1'
    compile 'com.google.android.exoplayer:exoplayer-hls:r2.5.1'
    compile 'com.google.android.exoplayer:exoplayer-smoothstreaming:r2.5.1'
    compile 'com.google.android.exoplayer:exoplayer-ui:r2.5.1'
    compile 'com.jakewharton:butterknife:8.7.0'
    compile 'com.jakewharton.timber:timber:4.5.1'
    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.squareup.okhttp3:logging-interceptor:3.8.1'
    compile 'com.squareup.retrofit2:retrofit:2.3.0'
    compile 'com.squareup.retrofit2:converter-gson:2.3.0'
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.schibsted.spain:barista:1.7.0', {
        exclude group: 'com.android.support'
        exclude group: 'com.android.support.test.espresso', module: 'espresso-idling-resource'
    })
    // AndroidJUnitRunner and JUnit Rules
    androidTestCompile('com.android.support.test:runner:1.0.1', {
        exclude group: 'com.android.support'
    })
    androidTestCompile('com.android.support.test:rules:1.0.1', {
        exclude group: 'com.android.support'
    })
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'
}
